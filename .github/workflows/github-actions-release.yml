# https://fabianlee.org/2022/11/20/github-automated-github-release-of-golang-binary-using-github-actions/
name: build-release-binary

run-name: Create Github Release for GoLang binary

on: 
  push:
    #branches:
    #- main
    tags:
    - 'r*'

jobs:

  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write


    steps:

    # debug
    - name: Dump env
      run: env | sort
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # get all tags, needed to get git log
        ref: main

    # Go environment
    - name: setup Go Lang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19.5'
    - run: |
        go version
        cd src
        go mod init ${GITHUB_REPOSITORY}
        go mod tidy
        go build -ldflags "-X main.Version=${GITHUB_REF_NAME} -X main.BuiltBy=github-actions" main.go

    - run: git version
    - run: git branch
    - run: git tag

    - name: get semantic tag version and release notes from commit messages
      id: tag 
      run: |
        curtag=${GITHUB_REF_NAME}
        major_minor=$(echo "$curtag" | cut -d'.' -f1-2)
        patch=$(echo "$curtag" | cut -d'.' -f3)
        # avoid empty patch number
        [ -n "$patch" ] && ((patch--)) || patch=".x"
        prevtag="${major_minor}.${patch}"

        echo "" > body.log
        if git tag | grep $prevtag ; then
          git log -q ${curtag}...${prevtag} --pretty="- %s" -q --no-color >> body.log
        else
          git log --pretty="- %s" -q --no-color >> body.log
        fi
        line_count=$(cat body.log | wc -l)

        echo "curtag=$curtag" >> $GITHUB_OUTPUT
        echo "prevtag=$prevtag" >> $GITHUB_OUTPUT
        echo "line_count=$line_count" >> $GITHUB_OUTPUT

    - run: echo curtag is ${{ steps.tag.outputs.curtag }}
    - run: echo prevtag is ${{ steps.tag.outputs.prevtag }}
    - run: echo line_count is ${{ steps.tag.outputs.line_count }}
    - run: cat body.log

    #  create Github release with release note from file and binary asset attached
    - uses: ncipollo/release-action@v1
      with:
        name: ${{ env.GITHUB_REF_NAME }}
        tag: ${{ env.GITHUB_REF_NAME }}
        artifacts: "src/main"
        bodyFile: "body.log"
        token: ${{ secrets.GITHUB_TOKEN }}